import os
import requests
import logging
import json
import locale
from dotenv import load_dotenv
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler
from telegram.constants import ParseMode

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨")
GROUP_ID = 1671
API_URL = f"https://cabinet.amursu.ru/public_api/group/{GROUP_ID}"
CACHE_FILE = "schedule_cache.json"

# --- –ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ ---
NEW_SCHEDULE_TIMES = {
    1: "08:15-09:45",
    2: "09:55-11:25",
    3: "11:35-13:05",
    4: "14:00-15:30",
    5: "15:40-17:10",
    6: "17:20-18:50",
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –∏ –¥–∞–Ω–Ω—ã–º–∏ ---

def get_schedule_data():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏. –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ —Å API.
    –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂: (–¥–∞–Ω–Ω—ã–µ, —Ñ–ª–∞–≥_—á—Ç–æ_–¥–∞–Ω–Ω—ã–µ_–∏–∑_–∫—ç—à–∞)
    """
    try:
        response = requests.get(API_URL, timeout=10)
        response.raise_for_status()
        data = response.json()
        with open(CACHE_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        logger.info("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ —Å API –∏ –∫—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω.")
        return data, False

    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}. –ü—ã—Ç–∞—é—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞...")
        try:
            with open(CACHE_FILE, 'r', encoding='utf-8') as f:
                cached_data = json.load(f)
            logger.info("–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –∫—ç—à–∞.")
            return cached_data, True
        except (FileNotFoundError, json.JSONDecodeError):
            logger.error("–§–∞–π–ª –∫—ç—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.")
            return None, False

def get_week_type(schedule_data, target_date):
    if not schedule_data or 'current_week' not in schedule_data:
        return 1
    current_week_type = schedule_data['current_week']
    today = datetime.now()
    start_week_num = today.isocalendar()[1]
    target_week_num = target_date.isocalendar()[1]
    week_diff = target_week_num - start_week_num
    if week_diff % 2 != 0:
        return 2 if current_week_type == 1 else 1
    return current_week_type

def format_day_schedule(schedule_data, day_of_week, day_name, week_type):
    week_name = f"–ù–µ–¥–µ–ª—è {week_type}"
    header = f"**{day_name} ({week_name})**\n\n"
    
    lessons_for_day = [
        lesson for lesson in schedule_data.get('timetable_tamplate_lines', [])
        if lesson['weekday'] == day_of_week and (lesson['parity'] == 0 or lesson['parity'] == week_type) and lesson.get('discipline_str')
    ]
    if not lessons_for_day:
        return f"**{day_name} ({week_name})**\n\n‚úÖ –í —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç."

    lessons_for_day.sort(key=lambda x: x['lesson'])
    time_slots = {slot['lesson']: slot for slot in schedule_data.get('schedule_lines', [])}
    
    schedule_parts = []
    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
    # –£–±–∏—Ä–∞–µ–º enumerate –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π –Ω–æ–º–µ—Ä –ø–∞—Ä—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    for lesson in lessons_for_day:
        lesson_number = lesson['lesson'] # <-- –ë–µ—Ä–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞—Ä—ã
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
        slot = time_slots.get(lesson_number)
        if not slot: continue

        time_string = NEW_SCHEDULE_TIMES.get(lesson_number)
        if not time_string:
            time_format = '%Y-%m-%dT%H:%M:%S.%fZ'
            start_time = datetime.strptime(slot['begin_time'], time_format).strftime('%H:%M')
            end_time = datetime.strptime(slot['end_time'], time_format).strftime('%H:%M')
            time_string = f"{start_time}-{end_time}"

        subject = lesson.get('discipline_str', '–ù–µ —É–∫–∞–∑–∞–Ω')
        teacher = lesson.get('person_str', '–ù–µ —É–∫–∞–∑–∞–Ω')
        classroom = lesson.get('classroom_str', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        
        schedule_parts.append(
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π –Ω–æ–º–µ—Ä –ø–∞—Ä—ã ---
            f"üîî **{lesson_number}. {time_string}**\n"
            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
            f"üìö *–ü—Ä–µ–¥–º–µ—Ç:* {subject}\n"
            f"üßë‚Äçüè´ *–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:* {teacher}\n"
            f"üö™ *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {classroom}\n"
        )
            
    return header + "\n".join(schedule_parts)

def get_schedule_for_date(target_date, schedule_data):
    if not schedule_data:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    weekday = target_date.isoweekday()
    week_type = get_week_type(schedule_data, target_date)
    day_name = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"][weekday-1]
    return format_day_schedule(schedule_data, weekday, day_name, week_type)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram ---

async def start(update: Update, context: CallbackContext) -> None:
    schedule_data, from_cache = get_schedule_data()
    group_name = "–ò–°231"
    
    if not schedule_data:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    week_type = get_week_type(schedule_data, datetime.now())
    week_name = f"–ù–µ–¥–µ–ª—è {week_type}"
    today_str = datetime.now().strftime('%d %B %Y')
    
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –≥—Ä—É–ø–ø—ã **{group_name}**.\n\n"
        f"üìÖ **–°–µ–≥–æ–¥–Ω—è:** {today_str}\n"
        f"üóìÔ∏è **–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è:** {week_name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é:"
    )
    
    if from_cache:
        welcome_message = "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ! –°–µ—Ä–≤–µ—Ä –ê–º–ì–£ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.**\n–î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏.\n\n" + welcome_message

    reply_keyboard = [["–ù–∞ —Å–µ–≥–æ–¥–Ω—è", "–ù–∞ –∑–∞–≤—Ç—Ä–∞"], ["–≠—Ç–∞ –Ω–µ–¥–µ–ª—è", "–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è"]]
    await update.message.reply_text(
        welcome_message,
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

async def handle_message(update: Update, context: CallbackContext) -> None:
    if not update.message or not update.message.text:
        return

    text = update.message.text
    today = datetime.now()
    schedule_data, from_cache = get_schedule_data()

    if not schedule_data:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏e, –∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    message = ""
    if text == "–ù–∞ —Å–µ–≥–æ–¥–Ω—è":
        message = get_schedule_for_date(today, schedule_data)
    elif text == "–ù–∞ –∑–∞–≤—Ç—Ä–∞":
        tomorrow = today + timedelta(days=1)
        message = get_schedule_for_date(tomorrow, schedule_data)
    elif text == "–≠—Ç–∞ –Ω–µ–¥–µ–ª—è":
        await show_week_schedule(update, context, is_next_week=False)
        return
    elif text == "–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è":
        await show_week_schedule(update, context, is_next_week=True)
        return
    
    if from_cache:
        message = "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ! –°–µ—Ä–≤–µ—Ä –ê–º–ì–£ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.**\n–ü–æ–∫–∞–∑—ã–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –û–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–º.\n\n" + message
    
    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

async def show_week_schedule(update: Update, context: CallbackContext, is_next_week: bool):
    week_days = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë"]
    prefix = "next_week" if is_next_week else "this_week"
    keyboard = [InlineKeyboardButton(day, callback_data=f"{prefix}_{i+1}") for i, day in enumerate(week_days)]
    reply_markup = InlineKeyboardMarkup([keyboard])
    week_name = "—Å–ª–µ–¥—É—é—â—É—é" if is_next_week else "—Ç–µ–∫—É—â—É—é"
    await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–∞ {week_name} –Ω–µ–¥–µ–ª—é:", reply_markup=reply_markup)

async def button_callback(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer() 
    
    query_data = query.data
    prefix, day_index_str = query_data.rsplit('_', 1)
    day_index = int(day_index_str)
    
    today = datetime.now()
    if prefix == "this_week":
        target_date = today - timedelta(days=today.isoweekday() - day_index)
    else: # next_week
        days_left_in_week = 7 - today.isoweekday()
        next_monday = today + timedelta(days=days_left_in_week + 1)
        target_date = next_monday + timedelta(days=day_index - 1)
        
    schedule_data, from_cache = get_schedule_data()
    
    if not schedule_data:
        await query.edit_message_text(text="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    message = get_schedule_for_date(target_date, schedule_data)
    
    if from_cache:
        message = "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ! –°–µ—Ä–≤–µ—Ä –ê–º–ì–£ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.**\n–ü–æ–∫–∞–∑—ã–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –û–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–º.\n\n" + message

    if query.message.text != message:
        await query.edit_message_text(text=message, parse_mode=ParseMode.MARKDOWN)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---

def main() -> None:
    try:
        locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
    except locale.Error:
        try:
            locale.setlocale(locale.LC_TIME, 'Russian_Russia.1251')
        except locale.Error:
            logger.warning("–†—É—Å—Å–∫–∞—è –ª–æ–∫–∞–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–∞—Ç—ã –±—É–¥—É—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")

    if not TELEGRAM_TOKEN or TELEGRAM_TOKEN == "–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨":
        print("–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ —Ñ–∞–π–ª–µ .env")
        return

    application = Application.builder().token(TELEGRAM_TOKEN).connect_timeout(10).read_timeout(10).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_callback))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()
